cmake_minimum_required(VERSION 3.14)
project(RogueLib)

# because cmake wont do this for me...
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++2a -stdlib=libc++")
endif ()

set(CMAKE_CXX_STANDARD 20)

add_library(RogueLib_Include INTERFACE)
target_include_directories(RogueLib_Include INTERFACE ${CMAKE_CURRENT_LIST_DIR})

if ((${CMAKE_BUILD_TYPE} MATCHES "Release") OR (${CMAKE_BUILD_TYPE} MATCHES "RelWithDebInfo"))
    add_compile_definitions(RogueLib_RELEASE)
    add_compile_options("-O3")
    if (NOT ROGUELIB_NONNATIVE)
        add_compile_options("-march=native")
    endif ()
elseif (${CMAKE_BUILD_TYPE} MATCHES "Debug")
    if (NOT ROGUELIB_NONNATIVE)
        add_compile_options("-march=native")
    endif ()
    add_compile_definitions(RogueLib_DEBUG)
else ()
    message(ERR ${CMAKE_BUILD_TYPE})
    message(FATAL_ERROR "UNNKNOWN BUILD TYPE")
endif ()

function(add_lib LIB_NAME)
    file(GLOB_RECURSE LIB_SRC ${CMAKE_CURRENT_LIST_DIR}/*.cpp ${CMAKE_CURRENT_LIST_DIR}/*.hpp)
    file(GLOB_RECURSE LIB_TEST_SRC ${CMAKE_CURRENT_LIST_DIR}/test/*.cpp ${CMAKE_CURRENT_LIST_DIR}/test/*.hpp)
    file(GLOB_RECURSE LIB_MB_SRC ${CMAKE_CURRENT_LIST_DIR}/mb/*.cpp ${CMAKE_CURRENT_LIST_DIR}/mb/*.hpp)
    file(GLOB_RECURSE LIB_LIB_SRC ${CMAKE_CURRENT_LIST_DIR}/lib/*.cpp ${CMAKE_CURRENT_LIST_DIR}/lib/*.hpp)
    foreach (file in ${LIB_TEST_SRC})
        list(REMOVE_ITEM LIB_SRC "${file}")
    endforeach ()
    foreach (file in ${LIB_MB_SRC})
        list(REMOVE_ITEM LIB_SRC "${file}")
    endforeach ()
    foreach (file in ${LIB_LIB_SRC})
        list(REMOVE_ITEM LIB_SRC "${file}")
    endforeach ()
    set(HAS_CPP ${LIB_SRC})
    list(FILTER HAS_CPP INCLUDE REGEX ".*cpp")
    if (HAS_CPP)
        add_library(RogueLib_${LIB_NAME} SHARED ${LIB_SRC})
        set(LIB_TYPE PUBLIC)
    else ()
        add_library(RogueLib_${LIB_NAME} INTERFACE)
        set(LIB_TYPE INTERFACE)
    endif ()
    target_link_libraries(RogueLib_${LIB_NAME} ${LIB_TYPE} RogueLib_Include)
    if (LIB_TEST_SRC)
        add_executable(RogueLib_${LIB_NAME}_TEST ${LIB_TEST_SRC})
        target_link_libraries(RogueLib_${LIB_NAME}_TEST PRIVATE RogueLib_${LIB_NAME} Boost::unit_test_framework)
    endif ()
    if (LIB_MB_SRC)
        add_executable(RogueLib_${LIB_NAME}_MB ${LIB_MB_SRC})
        target_link_libraries(RogueLib_${LIB_NAME}_MB PRIVATE RogueLib_${LIB_NAME})
    endif ()
    set(LAST_LIBRARY RogueLib_${LIB_NAME} PARENT_SCOPE)
    set(LAST_LIBRARY_TYPE ${LIB_TYPE} PARENT_SCOPE)

endfunction()

function(add_external_lib_dependency DEP_NAME)
    target_link_libraries(${LAST_LIBRARY} ${LAST_LIBRARY_TYPE} ${DEP_NAME})
endfunction()

function(add_lib_dependency DEP_NAME)
    add_external_lib_dependency("RogueLib_${DEP_NAME}")
endfunction()

add_subdirectory(boost-cmake)

add_subdirectory(RogueLib/Exceptions)
#add_subdirectory(RogueLib/Filesystem)
add_subdirectory(RogueLib/ROBN)
add_subdirectory(RogueLib/Logging)
add_subdirectory(RogueLib/Networking)
add_subdirectory(RogueLib/NUMA)
add_subdirectory(RogueLib/Scripting)
add_subdirectory(RogueLib/Threading)
